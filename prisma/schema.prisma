// Database schema for ChatGenius
// Using SQLite for development
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

// User model - core user information and authentication
model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String    @unique
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  channels      Channel[] @relation("ChannelMembers")
  ownedChannels Channel[] @relation("ChannelOwner")
  messages      Message[]
  threads       Thread[]
  reactions     Reaction[]
  sentMessages     DirectMessage[] @relation("SentMessages")
  receivedMessages DirectMessage[] @relation("ReceivedMessages")
  status    String   @default("offline") // "online", "offline", "away"
  lastSeen  DateTime @default(now())
}

// Channel model - represents chat channels
model Channel {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  ownerId     String
  owner       User      @relation("ChannelOwner", fields: [ownerId], references: [id])
  members     User[]    @relation("ChannelMembers")
  messages    Message[]
  threads     Thread[]
}

// Message model - represents messages in channels
model Message {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  channelId String
  user      User      @relation(fields: [userId], references: [id])
  channel   Channel   @relation(fields: [channelId], references: [id])
  threads   Thread[]
  reactions Reaction[]
}

// Thread model - represents message threads/replies
model Thread {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  messageId String
  channelId String
  user      User      @relation(fields: [userId], references: [id])
  message   Message   @relation(fields: [messageId], references: [id])
  channel   Channel   @relation(fields: [channelId], references: [id])
  reactions Reaction[]
}

// Reaction - for message reactions/emojis
model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  messageId String?
  threadId  String?
  user      User     @relation(fields: [userId], references: [id])
  message   Message? @relation(fields: [messageId], references: [id])
  thread    Thread?  @relation(fields: [threadId], references: [id])
}

// DirectMessage model - represents direct messages
model DirectMessage {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  fromUserId String
  toUserId   String
  fromUser   User     @relation("SentMessages", fields: [fromUserId], references: [id])
  toUser     User     @relation("ReceivedMessages", fields: [toUserId], references: [id])
} 